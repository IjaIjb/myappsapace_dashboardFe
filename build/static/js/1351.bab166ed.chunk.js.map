{"version":3,"file":"static/js/1351.bab166ed.chunk.js","mappings":"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","sources":["components/UI/LoadingSpinner.tsx","pages/auth/AddStore.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ntype Props = {};\r\n\r\nconst LoadingSpinner = (props: Props) => {\r\n  return (\r\n    <svg\r\n      role=\"status\"\r\n      className=\"inline w-5 h-5 mr-2 text-gray-200 animate-spin  fill-gray-600 \"\r\n      viewBox=\"0 0 100 101\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\r\n        fill=\"currentColor\"\r\n      />\r\n      <path\r\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\r\n        fill=\"currentFill\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowRight } from \"react-icons/fa\";\r\nimport LoadingSpinner from \"../../components/UI/LoadingSpinner\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { UserApis } from \"../../apis/userApi/userApi\";\r\n\r\nconst images = [\r\n  \"/images/auth/authImage1.svg\",\r\n  \"/images/auth/authImage2.svg\",\r\n  \"/images/auth/authImage3.svg\",\r\n];\r\n\r\nconst AddStore = () => {\r\n  const [index, setIndex] = useState(0);\r\n  const [image, setImage] = useState<string | null>(null); \r\n   const [preview, setPreview] = useState(\"\");\r\n   const [formData, setFormData] = useState<any>({\r\n    store_name: \"\",\r\n    domain_name: \"\",\r\n    store_abbreviation: \"\",\r\n    industry_type: \"\",\r\n    product_type: \"\",\r\n    store_description: \"\",\r\n    store_location: \"\",\r\n    already_have_domain: false, // Added field\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setIndex((prevIndex) => (prevIndex + 1) % images.length);\r\n    }, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleChange = (e: any) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData((prev: any) => ({\r\n      ...prev,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n  };\r\n\r\n  const handleImageChange = (e:any) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setImage(file);\r\n      setPreview(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  // const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   const file:any = e.target.files?.[0];\r\n  //   if (file) {\r\n  //     setImage(file); // Store the file object directly\r\n  //   }\r\n  // };\r\n  \r\n\r\n  // const handleSubmit = async (e: React.FormEvent) => {\r\n  //   e.preventDefault();\r\n  //   setLoading(true);\r\n  //   try {\r\n  //     console.log(\"Submitting store details:\", { ...formData, store_logo: image });\r\n  //     toast.success(\"Store created successfully!\");\r\n  //     navigate(\"/auth/choose-profession\");\r\n  //   } catch (error) {\r\n  //     toast.error(\"An error occurred while creating the store.\");\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n  const handleSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    try {\r\n      const form = new FormData();\r\n      if (image) form.append(\"store_logo\", image);\r\n\r\n      // Append form data\r\n      Object.keys(formData).forEach((key: any) => {\r\n        if (key === \"already_have_domain\") {\r\n          form.append(key, formData[key] ? \"1\" : \"0\"); // Convert boolean to 1 or 0\r\n        } else if (key === \"domain_name\" && !formData.already_have_domain) {\r\n          return; // Skip adding domain_name if already_have_domain is false\r\n        } else {\r\n          form.append(key, formData[key]);\r\n        }\r\n      });\r\n\r\n      const response = await UserApis.createStore(form);\r\n      if (response?.status === 200 || response.status === 201) {\r\n        toast.success(\"Store created successfully!\");\r\n        navigate(\"/auth/choose-profession\");\r\n      } else {\r\n        toast.error(\"Failed to create store. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating store:\", error);\r\n      toast.error(\"An error occurred while creating the store.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleSkip = () => {\r\n  toast.success(\"Logged in Succesfully\");\r\n    localStorage.removeItem(\"selectedStore\"); // Remove selected store if needed\r\n\r\n    navigate(\"/dashboard/home\"); // Redirect to login page\r\n  };\r\n  return (\r\n    <div className=\"p-8\">\r\n    <div className=\"grid md:grid-cols-2\">\r\n      <div className=\"h-screen md:block hidden relative overflow-hidden\">\r\n        <AnimatePresence>\r\n          <motion.img\r\n            key={images[index]}\r\n            src={images[index]}\r\n            alt=\"Auth Image\"\r\n            className=\"h-screen absolute top-0 left-0\"\r\n            initial={{ opacity: 0, scale: 1.1 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            exit={{ opacity: 0, scale: 1.1 }}\r\n            transition={{ duration: 1 }}\r\n          />\r\n        </AnimatePresence>\r\n      </div>\r\n      <div className=\"md:block flex pt-10 px-5\">\r\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-3 max-w-[570px]\">\r\n          <label className=\"text-sm font-medium\">Add Logo</label>\r\n          <div className=\"flex justify-center text-center\">\r\n            <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer relative\">\r\n              <div className=\"flex flex-col items-center justify-center h-[100px]\">\r\n                {preview ? (\r\n                  <img src={preview} alt=\"Uploaded logo\" width={100} height={100} />\r\n                ) : (\r\n                  <div className=\"flex flex-col\">\r\n                    <h4 className=\"text-[#9D9D9D] text-[12px] font-[400] \">Upload Logo Image here</h4>\r\n                    <h4 className=\"text-[#9D9D9D] text-[10px] font-[400] \">Recommended size 32px by 32px</h4>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <input type=\"file\" accept=\"image/png, image/jpeg\" className=\"hidden\" onChange={handleImageChange} />\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            {Object.keys(formData).map((key) => {\r\n              if (key === \"already_have_domain\") return null; // Skip rendering the checkbox here\r\n              if (key === \"domain_name\" && !formData.already_have_domain) return null; // Hide domain_name if not needed\r\n\r\n              return (\r\n                <div key={key}>\r\n                  <label className=\"text-[#2B2C2B] capitalize text-[12px] font-[400] \">\r\n                    {key.replace(\"_\", \" \")}\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name={key}\r\n                    value={formData[key as keyof typeof formData]}\r\n                    onChange={handleChange}\r\n                    className=\"mt-1 block w-full h-[40px] border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n                    required\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {/* Toggle for \"Already Have a Domain\" */}\r\n          <div className=\"flex items-center space-x-3 mt-4\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"already_have_domain\"\r\n              checked={formData.already_have_domain}\r\n              onChange={handleChange}\r\n              className=\"h-4 w-4\"\r\n            />\r\n            <label className=\"text-sm font-medium\">Already have a domain?</label>\r\n          </div>\r\n\r\n          <div className=\"flex justify-between items-center h-full\">\r\n          <div\r\n          onClick={handleSkip}\r\n              // to=\"/dashboard/home\"\r\n         \r\n              className=\" flex gap-2 items-center py-2 w-fit px-10 bg-gray-400 text-white rounded-full hover:bg-secondary/[70%]\"\r\n            >\r\n          Skip\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              className=\"disabled:bg-gray-500 flex gap-2 items-center py-2 w-fit px-6 bg-secondary text-white rounded-full hover:bg-secondary/[70%]\"\r\n            >\r\n              {loading ? <LoadingSpinner /> : \"Proceed\"}\r\n              {!loading && <FaArrowRight />}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <ToastContainer \r\n    position=\"top-right\" \r\n    autoClose={2000} \r\n    hideProgressBar \r\n    newestOnTop \r\n    closeOnClick \r\n    rtl={false} \r\n    pauseOnFocusLoss \r\n    draggable \r\n    pauseOnHover \r\n    />\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default AddStore;\r\n\r\n\r\n\r\n// import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import * as Yup from \"yup\";\r\n// import { FaArrowRight } from \"react-icons/fa\";\r\n// import LoadingSpinner from \"../../components/UI/LoadingSpinner\";\r\n// import { UserApis } from \"../../apis/userApi/userApi\";\r\n// import { ToastContainer, toast } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { Dispatch } from \"redux\";\r\n// import { login } from \"../../reducer/loginSlice\";\r\n// import { motion, AnimatePresence } from \"framer-motion\";\r\n\r\n// const images = [\r\n//   \"/images/auth/authImage1.svg\",\r\n//   \"/images/auth/authImage2.svg\",\r\n//   \"/images/auth/authImage3.svg\",\r\n// ]; // Add more images as needed\r\n\r\n// interface ImageUploadProps {\r\n//   image: string | undefined; // URL of the uploaded image\r\n//   setImage: (image: string | undefined) => void; // Updates the image URL\r\n// }\r\n// const AddStore = () => {\r\n//     const [index, setIndex] = useState(0);\r\n  \r\n//     useEffect(() => {\r\n//       const interval = setInterval(() => {\r\n//         setIndex((prevIndex) => (prevIndex + 1) % images.length);\r\n//       }, 3000); // Change image every 3 seconds\r\n  \r\n//       return () => clearInterval(interval);\r\n//     }, []);\r\n//   // const [showPassword, setShowPassword] = useState(false);\r\n//   // const [confirmPassword, setShowConfirmPassword] = useState(false);\r\n//   // const dispatch: Dispatch = useDispatch();\r\n//   const [image, setImage] = useState<any>(undefined);\r\n\r\n//   const navigate = useNavigate();\r\n//   const dispatch: Dispatch = useDispatch();\r\n\r\n//   const initialData = {\r\n//     store_logo: \"\",\r\n//     store_name: \"\",\r\n//     domain_name: \"\",\r\n//     store_abbreviation: \"\",\r\n//     industry_type: \"\",\r\n//     product_type: \"\",\r\n//     store_description: \"\",\r\n//     store_location: \"\",\r\n//   };\r\n\r\n//   const validation = Yup.object().shape({\r\n//     store_logo: Yup.mixed()\r\n//       .required(\"Store logo is required\")\r\n//       .test(\r\n//         \"fileType\",\r\n//         \"Invalid file type. Only images are allowed.\",\r\n//         (value: any) =>\r\n//           value && [\"image/jpeg\", \"image/png\", \"image/jpg\"].includes(value.type)\r\n//       )\r\n//       .test(\r\n//         \"fileSize\",\r\n//         \"File size is too large. Maximum size is 2MB.\",\r\n//         (value: any) => value && value.size <= 2 * 1024 * 1024 // 2MB\r\n//       ),\r\n//       domain_name: Yup.string()\r\n//       .required(\"Store name is required\")\r\n//       .min(3, \"Store name must be at least 3 characters\")\r\n//       .max(100, \"Store name cannot exceed 100 characters\"),\r\n//       store_name: Yup.string()\r\n//       .required(\"Store name is required\")\r\n//       .min(3, \"Store name must be at least 3 characters\")\r\n//       .max(100, \"Store name cannot exceed 100 characters\"),\r\n//     store_abbreviation: Yup.string()\r\n//       .required(\"Store abbreviation is required\")\r\n//       .max(10, \"Abbreviation cannot exceed 10 characters\"),\r\n//     industry_type: Yup.string().required(\"Industry type is required\"),\r\n//     product_type: Yup.string().required(\"Product type is required\"),\r\n//     store_description: Yup.string()\r\n//       .required(\"Store description is required\")\r\n//       .min(10, \"Description must be at least 10 characters\"),\r\n//     store_location: Yup.string().required(\"Store location is required\"),\r\n//   });\r\n\r\n//   const ImageUpload: React.FC<ImageUploadProps> = ({ image, setImage }) => {\r\n//     const [loading, setLoading] = useState(false);\r\n\r\n//     const handleImageChange = async (\r\n//       e: React.ChangeEvent<HTMLInputElement>\r\n//     ) => {\r\n//       const file = e.target.files?.[0];\r\n//       if (file) {\r\n//         setLoading(true); // Show loading spinner or indicator\r\n\r\n//         try {\r\n//           // Create a FormData object\r\n//           const formData = new FormData();\r\n//           formData.append(\"file\", file);\r\n//           formData.append(\"upload_preset\", \"urban_image\"); // Replace with your Cloudinary preset\r\n\r\n//           // Upload to Cloudinary\r\n//           const response = await fetch(\r\n//             \"https://api.cloudinary.com/v1_1/dngyazspl/image/upload\",\r\n//             {\r\n//               method: \"POST\",\r\n//               body: formData,\r\n//             }\r\n//           );\r\n\r\n//           const result = await response.json();\r\n//           if (result.secure_url) {\r\n//             // Set the image URL in the state\r\n//             setImage(result.secure_url);\r\n//           }\r\n\r\n//           setLoading(false); // Stop loading\r\n//         } catch (error) {\r\n//           console.error(\"Error uploading image\", error);\r\n//           toast.error(\"Error uploading image. Please try again.\");\r\n//           setLoading(false);\r\n//         }\r\n//       }\r\n//     };\r\n\r\n//     return (\r\n//       <div className=\"flex justify-center text-center\">\r\n//         <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer relative\">\r\n//           <div className=\"flex flex-col items-center justify-center h-[80px]\">\r\n//             {image ? (\r\n//               <img\r\n//                 className=\"\"\r\n//                 src={image} // This should now be the Cloudinary URL\r\n//                 alt=\"Uploaded logo\"\r\n//                 width={100}\r\n//                 height={100}\r\n//               />\r\n//             ) : (\r\n//               <div className=\"flex justify-center items-center\">\r\n//                 <div className=\"flex flex-col\">\r\n//                   <h4 className=\"text-[#9D9D9D] text-[12px] font-[400] \">\r\n//                     Upload Logo Image here{\" \"}\r\n//                   </h4>\r\n//                   <h4 className=\"text-[#9D9D9D] text-[10px] font-[400] \">\r\n//                     Recommended size 32px by 32px{\" \"}\r\n//                   </h4>\r\n//                 </div>\r\n//               </div>\r\n//               //   <img\r\n//               //     className=\"\"\r\n//               //     src=\"/onboarding/Icon.svg\" // Default placeholder image\r\n//               //     alt=\"Default\"\r\n//               //     width={100}\r\n//               //     height={100}\r\n//               //   />\r\n//             )}\r\n//           </div>\r\n//           <input\r\n//             type=\"file\"\r\n//             accept=\"image/x-png,image/gif,image/jpeg\"\r\n//             className=\"hidden mb-2 text-sm text-[#6C757D] font-medium\"\r\n//             onChange={handleImageChange}\r\n//           />\r\n//         </label>\r\n//         {loading && <p>Uploading...</p>}\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const onSubmit = async (\r\n//     values: any,\r\n//     { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n//   ) => {\r\n//     setSubmitting(true);\r\n\r\n//     try {\r\n//       // Create a FormData object\r\n//       const formData = new FormData();\r\n//       formData.append(\"store_logo\", image); // File\r\n//       formData.append(\"store_name\", values.store_name);\r\n//       formData.append(\"domain_name\", values.domain_name);\r\n//       formData.append(\r\n//         \"store_abbreviation\",\r\n//         values.store_abbreviation ? values.store_abbreviation : \"\"\r\n//       );\r\n//       formData.append(\"industry_type\", values.industry_type);\r\n//       formData.append(\"product_type\", values.product_type);\r\n//       formData.append(\"store_description\", values.store_description);\r\n//       formData.append(\"store_location\", values.store_location);\r\n\r\n//       // Send the data to the API\r\n//       const response = await UserApis.createStore(formData);\r\n\r\n//       if (response?.data?.status === true) {\r\n//               // dispatch(\r\n//               //       login({\r\n//               //         login: values.login,\r\n//               //         token: response.data.token,\r\n//               //         id: response.data.data.id,\r\n//               //         name: response.data.data.first_name,\r\n//               //         data: response?.data?.data,\r\n//               //       })\r\n//               //     );\r\n//         toast.success(\"Store created successfully!\");\r\n//         // Redirect or reset form\r\n//         console.log(\"Store created:\", response.data);\r\n//         // navigate(\"/dashboard/home\");\r\n//         navigate(\"/auth/choose-profession\"); \r\n//       } else {\r\n//         toast.error(\"Failed to create store. Please try again.\");\r\n//         console.error(\"Error response:\", response);\r\n//       }\r\n//     } catch (error) {\r\n//       console.error(\"Error creating store:\", error);\r\n//       toast.error(\"An error occurred while creating the store.\");\r\n//     } finally {\r\n//       setSubmitting(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"p-8\">\r\n//         <div className=\"grid md:grid-cols-2 \">\r\n//           {/* <div className=\"h-screen md:block hidden \">\r\n//             <img\r\n//               src=\"/images/auth/authImage1.svg\"\r\n//               className=\"h-screen\"\r\n//               alt=\"Logo\"\r\n//             />\r\n//           </div> */}\r\n\r\n// <div className=\"h-screen md:block hidden relative overflow-hidden\">\r\n//       <AnimatePresence>\r\n//         <motion.img\r\n//           key={images[index]} // Ensure smooth transition\r\n//           src={images[index]}\r\n//           alt=\"Auth Image\"\r\n//           className=\"h-screen absolute top-0 left-0\"\r\n//           initial={{ opacity: 0, scale: 1.1 }}\r\n//           animate={{ opacity: 1, scale: 1 }}\r\n//           exit={{ opacity: 0, scale: 1.1 }}\r\n//           transition={{ duration: 1 }}\r\n//         />\r\n//       </AnimatePresence>\r\n//     </div>\r\n//           <div className=\"md:block flex \">\r\n//             <div className=\" pt-10  px-5\">\r\n//               <div className=\"\">\r\n//               <a href=\"https://myappspace.net/\" rel=\"noreferrer\" target=\"_blank\">\r\n//             <img\r\n//               src=\"/images/auth/MyAppspace (3).png\"\r\n//               className=\"w-[170px] h-full\"\r\n//               alt=\"Logo\"\r\n//             />\r\n//             </a>\r\n//                 <div className=\" mt-7 \">\r\n//                   <h5 className=\"text-[#000000] text-[16px] font-[600] \">\r\n//                     Business Information\r\n//                   </h5>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"flex flex-col max-w-[570px] mt-2 gap-3\">\r\n//                 <Formik\r\n//                   initialValues={initialData}\r\n//                   validationSchema={validation}\r\n//                   onSubmit={onSubmit}\r\n//                 >\r\n//                   {({ values, isSubmitting, handleChange }) => (\r\n//                     <Form className=\"w-full  mb-6 flex flex-col justify-between\">\r\n//                       <div className=\"\">\r\n//                         <div className=\" mb-3 w-full relative\">\r\n//                           <label\r\n//                             className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                             htmlFor=\"first_name\"\r\n//                           >\r\n//                             Add Logo\r\n//                           </label>\r\n//                           <ImageUpload image={image} setImage={setImage} />\r\n\r\n//                           <p className=\"text-red-700 text-xs mt-1 \">\r\n//                             <ErrorMessage name=\"\" />\r\n//                           </p>\r\n//                         </div>\r\n\r\n//                         <div className=\"flex gap-3\">\r\n//                           <div className=\" mb-3 w-full relative\">\r\n//                             <label\r\n//                               className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                               htmlFor=\"store_name\"\r\n//                             >\r\n//                               Store Name\r\n//                             </label>\r\n//                             <Field\r\n//                               className=\"mt-1 block w-full h-[40px] border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                               name=\"store_name\"\r\n//                               type=\"text\"\r\n//                               id=\"store_name\"\r\n//                               required\r\n//                               onChange={handleChange}\r\n//                               value={values.store_name}\r\n//                               placeholder=\"Store Name\"\r\n//                             />\r\n//                             <p className=\"text-red-700 text-xs mt-1 \">\r\n//                               <ErrorMessage name=\"store_name\" />\r\n//                             </p>\r\n//                           </div>\r\n\r\n//                           <div className=\" mb-3 w-full relative\">\r\n//                             <label\r\n//                               className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                               htmlFor=\"industry_type\"\r\n//                             >\r\n//                               Industry Type\r\n//                             </label>\r\n//                             <Field\r\n//                               className=\"mt-1 block w-full h-[40px] border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                               name=\"industry_type\"\r\n//                               type=\"text\"\r\n//                               id=\"industry_type\"\r\n//                               onChange={handleChange}\r\n//                               value={values.industry_type}\r\n//                               placeholder=\"Retail, Fashion etc\"\r\n//                             />\r\n//                             <p className=\"text-red-700 text-xs mt-1 \">\r\n//                               <ErrorMessage name=\"industry_type\" />\r\n//                             </p>\r\n//                           </div>\r\n//                         </div>\r\n\r\n//                         <div className=\"flex gap-3\">\r\n//                           <div className=\" mb-3 w-full relative\">\r\n//                             <label\r\n//                               className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                               htmlFor=\"store_location\"\r\n//                             >\r\n//                               Business Location\r\n//                             </label>\r\n//                             <Field\r\n//                               className=\"mt-1 block w-full h-[40px] border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                               name=\"store_location\"\r\n//                               type=\"text\"\r\n//                               id=\"store_location\"\r\n//                               onChange={handleChange}\r\n//                               value={values.store_location}\r\n//                               placeholder=\"Abuja, Nigeria\"\r\n//                             />\r\n//                             <p className=\"text-red-700 text-xs mt-1 \">\r\n//                               <ErrorMessage name=\"store_location\" />\r\n//                             </p>\r\n//                           </div>\r\n\r\n//                           <div className=\" mb-3 w-full relative\">\r\n//                             <label\r\n//                               className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                               htmlFor=\"product_type\"\r\n//                             >\r\n//                               Products Type\r\n//                             </label>\r\n//                             <Field\r\n//                               className=\"mt-1 block w-full h-[40px] border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                               name=\"product_type\"\r\n//                               type=\"text\"\r\n//                               id=\"product_type\"\r\n//                               onChange={handleChange}\r\n//                               value={values.product_type}\r\n//                               placeholder=\"Physical, Digital, Both\"\r\n//                             />\r\n//                             <p className=\"text-red-700 text-xs mt-1 \">\r\n//                               <ErrorMessage name=\"product_type\" />\r\n//                             </p>\r\n//                           </div>\r\n//                         </div>\r\n\r\n// <div className=\"flex flex-col gap-1\">\r\n//                         <div className=\" mb-3 w-full relative\">\r\n//                             <label\r\n//                               className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                               htmlFor=\"domain_name\"\r\n//                             >\r\n//                               Domain Name\r\n//                             </label>\r\n//                             <Field\r\n//                               className=\"mt-1 block w-full h-[40px] border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                               name=\"domain_name\"\r\n//                               type=\"text\"\r\n//                               id=\"domain_name\"\r\n//                               required\r\n//                               onChange={handleChange}\r\n//                               value={values.domain_name}\r\n//                               placeholder=\"Domain Name\"\r\n//                             />\r\n//                             <p className=\"text-red-700 text-xs mt-1 \">\r\n//                               <ErrorMessage name=\"domain_name\" />\r\n//                             </p>\r\n//                           </div>\r\n//                         <div className=\" mb-3 w-full relative\">\r\n//                           <label\r\n//                             className=\" text-[#2B2C2B] text-[12px] font-[400] \"\r\n//                             htmlFor=\"store_description\"\r\n//                           >\r\n//                             Business Description\r\n//                           </label>\r\n//                           <Field\r\n//                             as=\"textarea\"\r\n//                             rows={4}\r\n//                             className=\"mt-1 block w-full  border-[0.5px]  pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF]  border-[#D8D8E2] \"\r\n//                             name=\"store_description\"\r\n//                             type=\"text\"\r\n//                             id=\"store_description\"\r\n//                             onChange={handleChange}\r\n//                             value={values.store_description}\r\n//                             placeholder=\"Enter a short description of your store\"\r\n//                           />\r\n//                           <p className=\"text-red-700 text-xs mt-1 \">\r\n//                             <ErrorMessage name=\"store_description\" />\r\n//                           </p>\r\n//                         </div>\r\n//                         </div>\r\n//                       </div>\r\n\r\n//                       <div className=\"flex justify-end items-end h-full\">\r\n//                         <button\r\n//                           type=\"submit\"\r\n//                           disabled={isSubmitting || !image} // Formik automatically sets this during submission\r\n//                           className={`disabled:bg-gray-500 flex gap-2 items-center py-2 w-fit px-6 bg-secondary text-white rounded-full hover:bg-secondary/[70%]`}\r\n//                         >\r\n//                           {isSubmitting ? <LoadingSpinner /> : \"Proceed\"}\r\n//                           {!isSubmitting && <FaArrowRight />}\r\n//                         </button>\r\n//                       </div>\r\n//                     </Form>\r\n//                   )}\r\n//                 </Formik>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <ToastContainer\r\n//         position=\"top-right\"\r\n//         autoClose={2000}\r\n//         hideProgressBar={true}\r\n//         newestOnTop={false}\r\n//         closeOnClick\r\n//         rtl={false}\r\n//         pauseOnFocusLoss\r\n//         draggable\r\n//         pauseOnHover\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AddStore;\r\n"],"names":["props","_jsxs","role","className","viewBox","fill","xmlns","children","_jsx","d","images","AddStore","index","setIndex","useState","image","setImage","preview","setPreview","formData","setFormData","store_name","domain_name","store_abbreviation","industry_type","product_type","store_description","store_location","already_have_domain","loading","setLoading","navigate","useNavigate","useEffect","interval","setInterval","prevIndex","length","clearInterval","handleChange","e","name","value","type","checked","target","prev","_objectSpread","AnimatePresence","motion","img","src","alt","initial","opacity","scale","animate","exit","transition","duration","onSubmit","async","preventDefault","form","FormData","append","Object","keys","forEach","key","response","UserApis","createStore","status","toast","success","error","console","width","height","accept","onChange","file","files","URL","createObjectURL","map","replace","required","onClick","handleSkip","localStorage","removeItem","disabled","LoadingSpinner","FaArrowRight","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover"],"sourceRoot":""}