{"version":3,"file":"static/js/7100.c304fde8.chunk.js","mappings":"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","sources":["components/UI/LoadingSpinner.tsx","pages/dashboard/category/inner/CreateCategory.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ntype Props = {};\r\n\r\nconst LoadingSpinner = (props: Props) => {\r\n  return (\r\n    <svg\r\n      role=\"status\"\r\n      className=\"inline w-5 h-5 mr-2 text-gray-200 animate-spin  fill-gray-600 \"\r\n      viewBox=\"0 0 100 101\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\r\n        fill=\"currentColor\"\r\n      />\r\n      <path\r\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\r\n        fill=\"currentFill\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DashboardLayout from \"../../../../components/DashboardLayout\";\r\nimport { FaArrowRight } from \"react-icons/fa\";\r\nimport { UserApis } from \"../../../../apis/userApi/userApi\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../../../../components/UI/LoadingSpinner\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../../store/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\n\r\nconst CreateCategory = () => {\r\n  const selectedStore = useSelector(\r\n    (state: RootState) => state.globalState?.selectedStore || null\r\n  );\r\n  console.log(\"Selected Store Code:\", selectedStore);\r\n\r\n  const [stores, setStores] = useState<any>([]);\r\n  const [formValues, setFormValues] = useState({\r\n    category_name: \"\",\r\n    store_code: \"\", // Use store_code instead of store_name\r\n    category_description: \"\",\r\n    status: \"active\",\r\n  });\r\n  const [categoryLogo, setCategoryLogo] = useState<File | null>(null);\r\n  const [loader, setLoader] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const onOpenModal = () => {\r\n    // e.preventDefault();\r\n    setOpen(true);\r\n  };\r\n  const onCloseModal = () => setOpen(false);\r\n\r\n  useEffect(() => {\r\n    if (!selectedStore) {\r\n      onOpenModal();\r\n    } else {\r\n      onCloseModal();\r\n    }\r\n  }, [selectedStore]);\r\n\r\n  useEffect(() => {\r\n    UserApis.getStore()\r\n      .then((response) => {\r\n        if (response?.data) {\r\n          setStores(response?.data || []); // Adjusting to your API response structure\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching stores:\", error));\r\n  }, []);\r\n  console.log(stores);\r\n  const handleInputChange = (\r\n    e: React.ChangeEvent<\r\n      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement\r\n    >\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    setFormValues((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setCategoryLogo(file);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setLoader(true);\r\n\r\n    const formData = new FormData();\r\n    if (categoryLogo) {\r\n      formData.append(\"category_image\", categoryLogo);\r\n    }\r\n    formData.append(\"category_name\", formValues.category_name);\r\n    formData.append(\"category_description\", formValues.category_description);\r\n    formData.append(\"status\", formValues.status);\r\n    console.log(\"Submitting payload:\", formValues);\r\n\r\n    try {\r\n      console.log(\"Submitting payload:\", formValues);\r\n\r\n      const response: any = await UserApis.createCategory(\r\n        selectedStore,\r\n        formData\r\n      );\r\n      console.log(response);\r\n\r\n      if (response?.data) {\r\n        toast.success(\r\n          response?.data?.message || \"Category created successfully!\"\r\n        );\r\n        navigate(\"/dashboard/category\");\r\n      } else {\r\n        toast.error(response?.data?.message || \"Failed to create category.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating category:\", error);\r\n      toast.error(\"An error occurred while creating the category.\");\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <Modal\r\n        classNames={{\r\n          modal: \"rounded-[10px] overflow-visible relative\",\r\n        }}\r\n        open={open}\r\n        onClose={() => {}} // Prevents closing the modal\r\n        closeOnEsc={false} // Prevent closing with the Escape key\r\n        closeOnOverlayClick={false} // Prevent closing by clicking outside\r\n        showCloseIcon={false} // Hides the close button\r\n        center\r\n      >\r\n        <div className=\"px-2 md:px-5  h-[100px] flex justify-center items-center  text-center\">\r\n          <div>\r\n            <h4 className=\"text-[20px] font-[600] mb-4\">Don't have a Store?</h4>\r\n            <Link\r\n              to=\"/dashboard/create-store\"\r\n              className=\"underline text-blue-800\"\r\n            >\r\n              Create a Store\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <div>\r\n        <h5 className=\"text-[#000000] text-[16px] font-[600] mb-7\">\r\n          Create Category\r\n        </h5>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          className=\"flex flex-col max-w-[570px] mt-5 gap-3\"\r\n        >\r\n          {/* Category Image */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_image\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Category Image\r\n            </label>\r\n            <div className=\"flex justify-center text-center\">\r\n              <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer\">\r\n                <div className=\"flex flex-col items-center justify-center h-[80px]\">\r\n                  {categoryLogo ? (\r\n                    <img\r\n                      src={URL.createObjectURL(categoryLogo)}\r\n                      alt=\"Uploaded logo\"\r\n                      width={100}\r\n                      height={100}\r\n                    />\r\n                  ) : (\r\n                    <div>\r\n                      <p className=\"text-[#9D9D9D] text-[12px] font-[400]\">\r\n                        Upload Logo Image here\r\n                      </p>\r\n                      <p className=\"text-[#9D9D9D] text-[10px] font-[400]\">\r\n                        Recommended size 32px by 32px\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/x-png,image/gif,image/jpeg\"\r\n                  className=\"hidden\"\r\n                  // required\r\n                  onChange={handleImageChange}\r\n                />\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Category Name */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"category_name\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Category Name\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"category_name\"\r\n              value={formValues.category_name}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Enter category name\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Category Description */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"category_description\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Category Description\r\n            </label>\r\n            <textarea\r\n              name=\"category_description\"\r\n              value={formValues.category_description}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              rows={4}\r\n              placeholder=\"Enter a short description\"\r\n              // required\r\n            />\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <div className=\"flex justify-end items-end h-full\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loader}\r\n              className={`disabled:bg-gray-500 flex gap-2 items-center py-2 w-fit px-6 bg-secondary text-white rounded-full hover:bg-secondary/[70%]`}\r\n            >\r\n              {loader ? <LoadingSpinner /> : \"Proceed\"}\r\n              {!loader && <FaArrowRight />}\r\n            </button>\r\n            <ToastContainer\r\n              position=\"top-right\"\r\n              autoClose={2000}\r\n              hideProgressBar={true}\r\n              newestOnTop={false}\r\n              closeOnClick\r\n              rtl={false}\r\n              pauseOnFocusLoss\r\n              draggable\r\n              pauseOnHover\r\n            />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default CreateCategory;\r\n\r\n// import React, { useState } from 'react'\r\n// import DashboardLayout from '../../../../components/DashboardLayout'\r\n// import { IoAddCircleOutline } from 'react-icons/io5'\r\n// import { Link } from \"react-router-dom\";\r\n// import { UserApis } from '../../../../apis/userApi/userApi';\r\n// import { ToastContainer, toast } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import LoadingSpinner from '../../../../components/UI/LoadingSpinner';\r\n// import { FaArrowRight } from 'react-icons/fa';\r\n\r\n// const CreateCategory = () => {\r\n//   const [stores, setStores] = React.useState<any>([]);\r\n\r\n//   React.useEffect(() => {\r\n//     UserApis.getStore()\r\n//       .then((response) => {\r\n//         if (response?.data) {\r\n//           // console?.log(response?.data);\r\n//           setStores(response?.data);\r\n//         } else {\r\n//           // dispatch(login([]))\r\n//         }\r\n//       })\r\n//       .catch(function (error) {});\r\n//   }, []);\r\n\r\n//    const [formValues, setFormValues] = useState({\r\n//       category_name: \"\",\r\n//       store_name: \"\",\r\n//       category_description: \"\",\r\n//       status: \"active\",\r\n//     });\r\n\r\n//     const [categoryLogo, setCategoryLogo] = useState<File | null>(null); // Store file here\r\n//     const [loader, setLoader] = useState(false);\r\n//     const navigate = useNavigate();\r\n\r\n//     const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n//       const { name, value } = e.target;\r\n//       setFormValues((prev) => ({ ...prev, [name]: value }));\r\n//     };\r\n\r\n//     const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//       const file = e.target.files?.[0];\r\n//       if (file) {\r\n//         setCategoryLogo(file); // Save the file\r\n//       }\r\n//     };\r\n\r\n//     const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n//       e.preventDefault();\r\n//       setLoader(true);\r\n\r\n//       const formData = new FormData();\r\n//       if (categoryLogo) {\r\n//         formData.append(\"category_image\", categoryLogo); // Attach the file\r\n//       }\r\n//       formData.append(\"category_name\", formValues.category_name);\r\n//       formData.append(\"category_description\", formValues.category_description);\r\n//       formData.append(\"status\", formValues.status);\r\n\r\n//       try {\r\n//         console.log(\"Submitting payload:\", formData);\r\n\r\n//         const response:any = await UserApis.createCategory(formValues.store_name, formData);\r\n//   console.log(response)\r\n//         if (response?.status === 200 || response?.status === 201) {\r\n//           toast.success(response?.data?.message || \"Store created successfully!\");\r\n//           navigate(\"/dashboard/category\");\r\n//         } else {\r\n//           toast.error(response?.data?.message || \"Failed to create category.\");\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error creating category:\", error);\r\n//         toast.error(\"An error occurred while creating the category.\");\r\n//       } finally {\r\n//         setLoader(false);\r\n//       }\r\n//     };\r\n\r\n//   return (\r\n//     <DashboardLayout>\r\n//       <div>\r\n//         <div className=\"flex gap-3 items-center mb-7\">\r\n//         <h5 className=\"text-[#000000] text-[16px] font-[600]\">Business Information</h5>\r\n//         <form onSubmit={handleSubmit} className=\"flex flex-col max-w-[570px] mt-5 gap-3\">\r\n//           {/* Add Logo */}\r\n//           <div>\r\n//             <label htmlFor=\"store_image\" className=\"text-[#2B2C2B] text-[12px] font-[400]\">\r\n//          Category Image\r\n//             </label>\r\n//             <div className=\"flex justify-center text-center\">\r\n//               <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer relative\">\r\n//                 <div className=\"flex flex-col items-center justify-center h-[80px]\">\r\n//                   {categoryLogo ? (\r\n//                     <img\r\n//                       src={URL.createObjectURL(categoryLogo)}\r\n//                       alt=\"Uploaded logo\"\r\n//                       width={100}\r\n//                       height={100}\r\n//                     />\r\n//                   ) : (\r\n//                     <div className=\"flex flex-col\">\r\n//                       <h4 className=\"text-[#9D9D9D] text-[12px] font-[400]\">Upload Logo Image here</h4>\r\n//                       <h4 className=\"text-[#9D9D9D] text-[10px] font-[400]\">\r\n//                         Recommended size 32px by 32px\r\n//                       </h4>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n//                 <input\r\n//                   type=\"file\"\r\n//                   accept=\"image/x-png,image/gif,image/jpeg\"\r\n//                   className=\"hidden mb-2 text-sm text-[#6C757D] font-medium\"\r\n//                   onChange={handleImageChange}\r\n//                 />\r\n//               </label>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div>\r\n//       <label htmlFor=\"store_name\" className=\"block text-sm font-medium text-gray-700\">\r\n//         Select Store\r\n//       </label>\r\n//       <select\r\n//         name=\"store_name\"\r\n//         // value={formValues.store_name}\r\n//         onChange={handleInputChange}\r\n//         className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n//         required\r\n//       >\r\n//         <option value=\"\" disabled>\r\n//           Select a store\r\n//         </option>\r\n//         {stores?.data?.data?.map((store: any) => (\r\n//           <option key={store.id} value={store.store_code}>\r\n//             {store.store_name}\r\n//           </option>\r\n//         ))}\r\n//       </select>\r\n//     </div>\r\n//           {/* category Name */}\r\n//           <div>\r\n//             <label htmlFor=\"category_name\" className=\"text-[#2B2C2B] text-[12px] font-[400]\">\r\n//              Category Name\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               name=\"category_name\"\r\n//               value={formValues.category_name}\r\n//               onChange={handleInputChange}\r\n//               className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n//               placeholder=\"Enter category name\"\r\n//               required\r\n//             />\r\n//           </div>\r\n\r\n//           {/* category Description */}\r\n//           <div>\r\n//             <label htmlFor=\"category_description\" className=\"text-[#2B2C2B] text-[12px] font-[400]\">\r\n//            Category Description\r\n//             </label>\r\n//             <textarea\r\n//               name=\"category_description\"\r\n//               value={formValues.category_description}\r\n//               onChange={handleInputChange}\r\n//               className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n//               rows={4}\r\n//               placeholder=\"Enter a short description\"\r\n//               required\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Submit Button */}\r\n//           <button\r\n//             type=\"submit\"\r\n//             disabled={loader}\r\n//             className=\"bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 disabled:bg-gray-400\"\r\n//           >\r\n//             {loader ? <LoadingSpinner /> : \"Proceed\"}\r\n//             {!loader && <FaArrowRight />}\r\n//           </button>\r\n//         </form>\r\n//         </div>\r\n//         {/* <RecentOrders /> */}\r\n//       </div>\r\n//     </DashboardLayout>\r\n//   )\r\n// }\r\n\r\n// export default CreateCategory\r\n"],"names":["props","_jsxs","role","className","viewBox","fill","xmlns","children","_jsx","d","CreateCategory","selectedStore","useSelector","state","_state$globalState","globalState","console","log","stores","setStores","useState","formValues","setFormValues","category_name","store_code","category_description","status","categoryLogo","setCategoryLogo","loader","setLoader","navigate","useNavigate","open","setOpen","useEffect","UserApis","getStore","then","response","data","catch","error","handleInputChange","e","name","value","target","prev","_objectSpread","DashboardLayout","Modal","classNames","modal","onClose","closeOnEsc","closeOnOverlayClick","showCloseIcon","center","Link","to","onSubmit","async","preventDefault","formData","FormData","append","createCategory","_response$data","_response$data2","toast","success","message","htmlFor","src","URL","createObjectURL","alt","width","height","type","accept","onChange","_e$target$files","file","files","placeholder","required","rows","disabled","LoadingSpinner","FaArrowRight","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover"],"sourceRoot":""}