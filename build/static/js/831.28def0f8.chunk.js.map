{"version":3,"file":"static/js/831.28def0f8.chunk.js","mappings":"+JAIA,MAqBA,EArBwBA,IAEpBC,EAAAA,EAAAA,MAAA,OACEC,KAAK,SACLC,UAAU,iEACVC,QAAQ,cACRC,KAAK,OACLC,MAAM,6BAA4BC,SAAA,EAElCC,EAAAA,EAAAA,KAAA,QACEC,EAAE,+WACFJ,KAAK,kBAEPG,EAAAA,EAAAA,KAAA,QACEC,EAAE,glBACFJ,KAAK,kB,qJCVb,MAsQA,EAtQoBK,KAClB,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,CAC3CC,WAAY,GACZC,YAAa,GACbC,mBAAoB,GACpBC,cAAe,GACfC,aAAc,GACdC,kBAAmB,GACnBC,eAAgB,MAGXC,EAAWC,IAAgBT,EAAAA,EAAAA,UAAsB,OACjDU,EAAQC,IAAaX,EAAAA,EAAAA,WAAS,GAC/BY,GAAWC,EAAAA,EAAAA,MAEXC,EACJC,IAEA,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BnB,GAAeoB,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAI,IAAE,CAACH,GAAOC,KAAS,EA6CvD,OACEtB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAe,CAAA3B,UACdN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYI,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,wCAAuCI,SAAC,0BAGtDN,EAAAA,EAAAA,MAAA,QACEkC,SA1CaC,UACnBR,EAAES,iBACFb,GAAU,GAEV,MAAMc,EAAW,IAAIC,SACjBlB,GACFiB,EAASE,OAAO,aAAcnB,GAEhCiB,EAASE,OAAO,aAAc7B,EAAWG,YACzCwB,EAASE,OAAO,cAAe7B,EAAWI,aAC1CuB,EAASE,OAAO,qBAAsB7B,EAAWK,oBAAsB,IACvEsB,EAASE,OAAO,gBAAiB7B,EAAWM,eAC5CqB,EAASE,OAAO,eAAgB7B,EAAWO,cAC3CoB,EAASE,OAAO,oBAAqB7B,EAAWQ,mBAChDmB,EAASE,OAAO,iBAAkB7B,EAAWS,gBAE7C,IACEqB,QAAQC,IAAI,sBAAuBJ,GAEnC,MAAMK,QAAsBC,EAAAA,EAASC,YAAYP,GAEU,IAADQ,EAGnDC,EAHP,GADAN,QAAQC,IAAIC,GACa,OAAb,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUK,SAAuC,OAAb,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUK,QACxCC,EAAAA,GAAMC,SAAgB,OAARP,QAAQ,IAARA,GAAc,QAANG,EAARH,EAAUQ,YAAI,IAAAL,OAAN,EAARA,EAAgBM,UAAW,+BACzC3B,EAAS,yBAETwB,EAAAA,GAAMI,OAAc,OAARV,QAAQ,IAARA,GAAc,QAANI,EAARJ,EAAUQ,YAAI,IAAAJ,OAAN,EAARA,EAAgBK,UAAW,0BAE3C,CAAE,MAAOC,GACPZ,QAAQY,MAAM,wBAAyBA,GACvCJ,EAAAA,GAAMI,MAAM,8CACd,CAAC,QACC7B,GAAU,EACZ,GAWMrB,UAAU,yCAAwCI,SAAA,EAGlDN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,aACRnD,UAAU,wCAAuCI,SAClD,cAGDC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,kCAAiCI,UAC9CN,EAAAA,EAAAA,MAAA,SAAOE,UAAU,8HAA6HI,SAAA,EAC5IC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,sDAAqDI,SACjEc,GACCb,EAAAA,EAAAA,KAAA,OACE+C,IAAKC,IAAIC,gBAAgBpC,GACzBqC,IAAI,gBACJC,MAAO,IACPC,OAAQ,OAGV3D,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gBAAeI,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,wCAAuCI,SAAC,4BAGtDC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,wCAAuCI,SAAC,wCAM5DC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLC,OAAO,mCACP3D,UAAU,iDACV4D,SArFWnC,IAA4C,IAADoC,EACpE,MAAMC,EAAqB,QAAjBD,EAAGpC,EAAEG,OAAOmC,aAAK,IAAAF,OAAA,EAAdA,EAAiB,GAC1BC,GACF3C,EAAa2C,EACf,aAwFMhE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,aACRnD,UAAU,wCAAuCI,SAClD,gBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,aACLC,MAAOnB,EAAWG,WAClBiD,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,mBACZC,UAAQ,QAIZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,cACRnD,UAAU,wCAAuCI,SAClD,iBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,cACLC,MAAOnB,EAAWI,YAClBgD,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,mBACZC,UAAQ,QAIZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,qBACRnD,UAAU,wCAAuCI,SAClD,wBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,qBACLC,MAAOnB,EAAWK,mBAClB+C,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,qBACZC,UAAQ,QAKZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,gBACRnD,UAAU,wCAAuCI,SAClD,mBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,gBACLC,MAAOnB,EAAWM,cAClB8C,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,wBACZC,UAAQ,QAKZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,eACRnD,UAAU,wCAAuCI,SAClD,kBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,eACLC,MAAOnB,EAAWO,aAClB6C,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,0BACZC,UAAQ,QAKZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,iBACRnD,UAAU,wCAAuCI,SAClD,uBAGDC,EAAAA,EAAAA,KAAA,SACEqD,KAAK,OACLhC,KAAK,iBACLC,MAAOnB,EAAWS,eAClB2C,SAAUpC,EACVxB,UAAU,6CACVgE,YAAY,0BACZC,UAAQ,QAKZnE,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8C,QAAQ,oBACRnD,UAAU,wCAAuCI,SAClD,0BAGDC,EAAAA,EAAAA,KAAA,YACEqB,KAAK,oBACLC,MAAOnB,EAAWQ,kBAClB4C,SAAUpC,EACVxB,UAAU,6CACVkE,KAAM,EACNF,YAAY,4BACZC,UAAQ,QAKZ5D,EAAAA,EAAAA,KAAA,OAAKL,UAAU,oCAAmCI,UAChDN,EAAAA,EAAAA,MAAA,UACE4D,KAAK,SACLS,SAAU/C,EACVpB,UAAU,oFAAmFI,SAAA,CAE5FgB,GAASf,EAAAA,EAAAA,KAAC+D,EAAAA,EAAc,IAAM,WAC7BhD,IAAUf,EAAAA,EAAAA,KAACgE,EAAAA,IAAY,aAI/BhE,EAAAA,EAAAA,KAACiE,EAAAA,GAAc,CAACC,UAAW,UAEb,C","sources":["components/UI/LoadingSpinner.tsx","pages/dashboard/store/CreateStore.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ntype Props = {};\r\n\r\nconst LoadingSpinner = (props: Props) => {\r\n  return (\r\n    <svg\r\n      role=\"status\"\r\n      className=\"inline w-5 h-5 mr-2 text-gray-200 animate-spin  fill-gray-600 \"\r\n      viewBox=\"0 0 100 101\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\r\n        fill=\"currentColor\"\r\n      />\r\n      <path\r\n        d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\r\n        fill=\"currentFill\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import DashboardLayout from \"../../../components/DashboardLayout\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowRight } from \"react-icons/fa\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport LoadingSpinner from \"../../../components/UI/LoadingSpinner\";\r\nimport { UserApis } from \"../../../apis/userApi/userApi\";\r\n\r\nconst CreateStore = () => {\r\n  const [formValues, setFormValues] = useState({\r\n    store_name: \"\",\r\n    domain_name: \"\",\r\n    store_abbreviation: \"\",\r\n    industry_type: \"\",\r\n    product_type: \"\",\r\n    store_description: \"\",\r\n    store_location: \"\",\r\n  });\r\n\r\n  const [storeLogo, setStoreLogo] = useState<File | null>(null); // Store file here\r\n  const [loader, setLoader] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleInputChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    const { name, value } = e.target;\r\n    setFormValues((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setStoreLogo(file); // Save the file\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setLoader(true);\r\n\r\n    const formData = new FormData();\r\n    if (storeLogo) {\r\n      formData.append(\"store_logo\", storeLogo); // Attach the file\r\n    }\r\n    formData.append(\"store_name\", formValues.store_name);\r\n    formData.append(\"domain_name\", formValues.domain_name);\r\n    formData.append(\"store_abbreviation\", formValues.store_abbreviation || \"\");\r\n    formData.append(\"industry_type\", formValues.industry_type);\r\n    formData.append(\"product_type\", formValues.product_type);\r\n    formData.append(\"store_description\", formValues.store_description);\r\n    formData.append(\"store_location\", formValues.store_location);\r\n\r\n    try {\r\n      console.log(\"Submitting payload:\", formData);\r\n\r\n      const response: any = await UserApis.createStore(formData);\r\n      console.log(response);\r\n      if (response?.status === 200 || response?.status === 201) {\r\n        toast.success(response?.data?.message || \"Store created successfully!\");\r\n        navigate(\"/dashboard/store\");\r\n      } else {\r\n        toast.error(response?.data?.message || \"Failed to create store.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating store:\", error);\r\n      toast.error(\"An error occurred while creating the store.\");\r\n    } finally {\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"pt-10 px-5\">\r\n        <h5 className=\"text-[#000000] text-[16px] font-[600]\">\r\n          Business Information\r\n        </h5>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          className=\"flex flex-col max-w-[570px] mt-5 gap-3\"\r\n        >\r\n          {/* Add Logo */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_logo\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Add Logo\r\n            </label>\r\n            <div className=\"flex justify-center text-center\">\r\n              <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer relative\">\r\n                <div className=\"flex flex-col items-center justify-center h-[140px]\">\r\n                  {storeLogo ? (\r\n                    <img\r\n                      src={URL.createObjectURL(storeLogo)}\r\n                      alt=\"Uploaded logo\"\r\n                      width={100}\r\n                      height={100}\r\n                    />\r\n                  ) : (\r\n                    <div className=\"flex flex-col\">\r\n                      <h4 className=\"text-[#9D9D9D] text-[12px] font-[400]\">\r\n                        Upload Logo Image here\r\n                      </h4>\r\n                      <h4 className=\"text-[#9D9D9D] text-[10px] font-[400]\">\r\n                        Recommended size 32px by 32px\r\n                      </h4>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input\r\n                  type=\"file\"\r\n                  accept=\"image/x-png,image/gif,image/jpeg\"\r\n                  className=\"hidden mb-2 text-sm text-[#6C757D] font-medium\"\r\n                  onChange={handleImageChange}\r\n                />\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Store Name */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_name\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Store Name\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"store_name\"\r\n              value={formValues.store_name}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Enter store name\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label\r\n              htmlFor=\"domain_name\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Domain Name\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"domain_name\"\r\n              value={formValues.domain_name}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Enter store name\"\r\n              required\r\n            />\r\n          </div>\r\n          {/* Store Abbreviation */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_abbreviation\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Store Abbreviation\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"store_abbreviation\"\r\n              value={formValues.store_abbreviation}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Enter abbreviation\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Industry Type */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"industry_type\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Industry Type\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"industry_type\"\r\n              value={formValues.industry_type}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"E.g., Retail, Fashion\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Product Type */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"product_type\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Product Type\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"product_type\"\r\n              value={formValues.product_type}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Physical, Digital, Both\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Store Location */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_location\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Business Location\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"store_location\"\r\n              value={formValues.store_location}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              placeholder=\"Enter business location\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Store Description */}\r\n          <div>\r\n            <label\r\n              htmlFor=\"store_description\"\r\n              className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n            >\r\n              Business Description\r\n            </label>\r\n            <textarea\r\n              name=\"store_description\"\r\n              value={formValues.store_description}\r\n              onChange={handleInputChange}\r\n              className=\"block w-full mt-1 border px-3 py-2 rounded\"\r\n              rows={4}\r\n              placeholder=\"Enter a short description\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Submit Button */}\r\n          <div className=\"flex justify-end items-end h-full\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={loader}\r\n              className=\"bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 disabled:bg-gray-400\"\r\n            >\r\n              {loader ? <LoadingSpinner /> : \"Proceed\"}\r\n              {!loader && <FaArrowRight />}\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <ToastContainer autoClose={3000} />\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default CreateStore;\r\n\r\n// import DashboardLayout from '../../../components/DashboardLayout'\r\n// import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import * as Yup from \"yup\";\r\n// import { FaArrowRight } from \"react-icons/fa\";\r\n// import { ToastContainer, toast } from \"react-toastify\";\r\n// import \"react-toastify/dist/ReactToastify.css\";\r\n// import { UserApis } from '../../../apis/userApi/userApi';\r\n// import LoadingSpinner from '../../../components/UI/LoadingSpinner';\r\n// interface ImageUploadProps {\r\n//   image: string | undefined; // URL of the uploaded image\r\n//   setImage: (image: string | undefined) => void; // Updates the image URL\r\n// }\r\n// const CreateStore = () => {\r\n\r\n//     const [image, setImage] = useState<any>(undefined);\r\n//     const [loader, setLoader] = useState(false);\r\n\r\n//     const navigate = useNavigate();\r\n\r\n//     const initialData = {\r\n//       store_logo: \"\",\r\n//       store_name: \"\",\r\n//       store_abbreviation: \"\",\r\n//       industry_type: \"\",\r\n//       product_type: \"\",\r\n//       store_description: \"\",\r\n//       store_location: \"\",\r\n//     };\r\n\r\n//     const validation = Yup.object().shape({\r\n//       store_logo: Yup.mixed()\r\n//         .required(\"Store logo is required\")\r\n//         .test(\r\n//           \"fileType\",\r\n//           \"Invalid file type. Only images are allowed.\",\r\n//           (value: any) =>\r\n//             value && [\"image/jpeg\", \"image/png\", \"image/jpg\"].includes(value.type)\r\n//         )\r\n//         .test(\r\n//           \"fileSize\",\r\n//           \"File size is too large. Maximum size is 2MB.\",\r\n//           (value: any) => value && value.size <= 2 * 1024 * 1024 // 2MB\r\n//         ),\r\n//       store_name: Yup.string()\r\n//         .required(\"Store name is required\")\r\n//         .min(3, \"Store name must be at least 3 characters\")\r\n//         .max(100, \"Store name cannot exceed 100 characters\"),\r\n//       store_abbreviation: Yup.string()\r\n//         .required(\"Store abbreviation is required\")\r\n//         .max(10, \"Abbreviation cannot exceed 10 characters\"),\r\n//       industry_type: Yup.string().required(\"Industry type is required\"),\r\n//       product_type: Yup.string().required(\"Product type is required\"),\r\n//       store_description: Yup.string()\r\n//         .required(\"Store description is required\")\r\n//         .min(10, \"Description must be at least 10 characters\"),\r\n//       store_location: Yup.string().required(\"Store location is required\"),\r\n//     });\r\n\r\n//     const ImageUpload: React.FC<ImageUploadProps> = ({ image, setImage }) => {\r\n//       const [loading, setLoading] = useState(false);\r\n\r\n//       const handleImageChange = async (\r\n//         e: React.ChangeEvent<HTMLInputElement>\r\n//       ) => {\r\n//         const file = e.target.files?.[0];\r\n//         if (file) {\r\n//           setLoading(true); // Show loading spinner or indicator\r\n\r\n//           try {\r\n//             // Create a FormData object\r\n//             const formData = new FormData();\r\n//             formData.append(\"file\", file);\r\n//             formData.append(\"upload_preset\", \"urban_image\"); // Replace with your Cloudinary preset\r\n\r\n//             // Upload to Cloudinary\r\n//             const response = await fetch(\r\n//               \"https://api.cloudinary.com/v1_1/dngyazspl/image/upload\",\r\n//               {\r\n//                 method: \"POST\",\r\n//                 body: formData,\r\n//               }\r\n//             );\r\n\r\n//             const result = await response.json();\r\n//             if (result.secure_url) {\r\n//               // Set the image URL in the state\r\n//               setImage(result.secure_url);\r\n//             }\r\n\r\n//             setLoading(false); // Stop loading\r\n//           } catch (error) {\r\n//             console.error(\"Error uploading image\", error);\r\n//             toast.error(\"Error uploading image. Please try again.\");\r\n//             setLoading(false);\r\n//           }\r\n//         }\r\n//       };\r\n\r\n//       return (\r\n//         <div className=\"flex justify-center text-center\">\r\n//           <label className=\"flex w-full bg-[#FBFBFF] border border-[#D8D8E2] flex-col items-center justify-center rounded-[5px] cursor-pointer relative\">\r\n//             <div className=\"flex flex-col items-center justify-center h-[80px]\">\r\n//               {image ? (\r\n//                 <img\r\n//                   className=\"\"\r\n//                   src={image} // This should now be the Cloudinary URL\r\n//                   alt=\"Uploaded logo\"\r\n//                   width={100}\r\n//                   height={100}\r\n//                 />\r\n//               ) : (\r\n//                 <div className=\"flex justify-center items-center\">\r\n//                   <div className=\"flex flex-col\">\r\n//                     <h4 className=\"text-[#9D9D9D] text-[12px] font-[400] \">\r\n//                       Upload Logo Image here{\" \"}\r\n//                     </h4>\r\n//                     <h4 className=\"text-[#9D9D9D] text-[10px] font-[400] \">\r\n//                       Recommended size 32px by 32px{\" \"}\r\n//                     </h4>\r\n//                   </div>\r\n//                 </div>\r\n//                 //   <img\r\n//                 //     className=\"\"\r\n//                 //     src=\"/onboarding/Icon.svg\" // Default placeholder image\r\n//                 //     alt=\"Default\"\r\n//                 //     width={100}\r\n//                 //     height={100}\r\n//                 //   />\r\n//               )}\r\n//             </div>\r\n//             <input\r\n//               type=\"file\"\r\n//               accept=\"image/x-png,image/gif,image/jpeg\"\r\n//               className=\"hidden mb-2 text-sm text-[#6C757D] font-medium\"\r\n//               onChange={handleImageChange}\r\n//             />\r\n//           </label>\r\n//           {loading && <p>Uploading...</p>}\r\n//         </div>\r\n//       );\r\n//     };\r\n\r\n//     const onSubmit = async (values: {\r\n//       store_logo: string; // Use the image URL directly\r\n//       store_name: string;\r\n//       store_abbreviation: string;\r\n//       industry_type: string;\r\n//       product_type: string;\r\n//       store_description: string;\r\n//       store_location: string;\r\n//      }) => {\r\n//       setLoader(true);\r\n//       const payload = {\r\n//         store_logo: image, // Use the image URL directly\r\n//         store_name: values.store_name,\r\n//         store_abbreviation: values.store_abbreviation || \"\",\r\n//         industry_type: values.industry_type,\r\n//         product_type: values.product_type,\r\n//         store_description: values.store_description,\r\n//         store_location: values.store_location,\r\n//       };\r\n//       try {\r\n//         // Create a JSON object instead of FormData\r\n\r\n//         console.log(\"Submitting payload:\", payload);\r\n\r\n//         // Send the JSON payload to the API\r\n//         const response = await UserApis.createStore(payload); // Ensure your `createStore` method supports JSON payloads\r\n\r\n//         console.log(\"API Response:\", response);\r\n\r\n//         if (response?.data?.status === true) {\r\n//           toast.success(\"Store created successfully!\");\r\n//           // Redirect or reset form\r\n//           console.log(\"Store created:\", response.data);\r\n//           navigate(\"/dashboard/store\");\r\n//         } else {\r\n//           toast.error(\"Failed to create store. Please try again.\");\r\n//           console.error(\"Error response:\", response);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Error creating store:\", error);\r\n//         toast.error(\"An error occurred while creating the store.\");\r\n//       } finally {\r\n//         setLoader(false);\r\n//       }\r\n//     };\r\n\r\n//   return (\r\n// <DashboardLayout>\r\n// <div>\r\n// <div className=\"md:block flex \">\r\n//             <div className=\" pt-10  px-5\">\r\n//               <div className=\"\">\r\n\r\n//                 <div className=\" mt-7 \">\r\n//                   <h5 className=\"text-[#000000] text-[16px] font-[600] \">\r\n//                     Business Information\r\n//                   </h5>\r\n//                 </div>\r\n//               </div>\r\n\r\n//               <div className=\"flex flex-col max-w-[570px] mt-2 gap-3\">\r\n//               <Formik\r\n//   initialValues={initialData}\r\n//   validationSchema={validation}\r\n//   onSubmit={onSubmit} // Formik will automatically call this function\r\n// >\r\n//   {({ setFieldValue }) => (\r\n//     <Form className=\"w-full mb-6 flex flex-col justify-between\">\r\n//       <div>\r\n//         <div className=\"mb-3 w-full relative\">\r\n//           <label\r\n//             className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//             htmlFor=\"first_name\"\r\n//           >\r\n//             Add Logo\r\n//           </label>\r\n//           <ImageUpload image={image} setImage={setImage} />\r\n//           <p className=\"text-red-700 text-xs mt-1\">\r\n//             <ErrorMessage name=\"first_name\" />\r\n//           </p>\r\n//         </div>\r\n\r\n//         <div className=\"flex gap-3\">\r\n//           <div className=\"mb-3 w-full relative\">\r\n//             <label\r\n//               className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//               htmlFor=\"store_name\"\r\n//             >\r\n//               Store Name\r\n//             </label>\r\n//             <Field\r\n//               className=\"mt-1 block w-full h-[40px] border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n//               name=\"store_name\"\r\n//               type=\"text\"\r\n//               id=\"store_name\"\r\n//               placeholder=\"Store Name\"\r\n//               onChange={(e: any) =>\r\n//                 setFieldValue(\"store_name\", e.target.value)\r\n//               }\r\n//             />\r\n//             <p className=\"text-red-700 text-xs mt-1\">\r\n//               <ErrorMessage name=\"store_name\" />\r\n//             </p>\r\n//           </div>\r\n\r\n//           <div className=\"mb-3 w-full relative\">\r\n//             <label\r\n//               className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//               htmlFor=\"industry_type\"\r\n//             >\r\n//               Industry Type\r\n//             </label>\r\n//             <Field\r\n//               className=\"mt-1 block w-full h-[40px] border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n//               name=\"industry_type\"\r\n//               type=\"text\"\r\n//               id=\"industry_type\"\r\n//               placeholder=\"Retail, Fashion, etc.\"\r\n//               onChange={(e: any) =>\r\n//                 setFieldValue(\"industry_type\", e.target.value)\r\n//               }\r\n//             />\r\n//             <p className=\"text-red-700 text-xs mt-1\">\r\n//               <ErrorMessage name=\"industry_type\" />\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"flex gap-3\">\r\n//           <div className=\"mb-3 w-full relative\">\r\n//             <label\r\n//               className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//               htmlFor=\"store_location\"\r\n//             >\r\n//               Business Location\r\n//             </label>\r\n//             <Field\r\n//               className=\"mt-1 block w-full h-[40px] border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n//               name=\"store_location\"\r\n//               type=\"text\"\r\n//               id=\"store_location\"\r\n//               placeholder=\"Abuja, Nigeria\"\r\n//               onChange={(e: any) =>\r\n//                 setFieldValue(\"store_location\", e.target.value)\r\n//               }\r\n//             />\r\n//             <p className=\"text-red-700 text-xs mt-1\">\r\n//               <ErrorMessage name=\"store_location\" />\r\n//             </p>\r\n//           </div>\r\n\r\n//           <div className=\"mb-3 w-full relative\">\r\n//             <label\r\n//               className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//               htmlFor=\"product_type\"\r\n//             >\r\n//               Products Type\r\n//             </label>\r\n//             <Field\r\n//               className=\"mt-1 block w-full h-[40px] border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n//               name=\"product_type\"\r\n//               type=\"text\"\r\n//               id=\"product_type\"\r\n//               placeholder=\"Physical, Digital, Both\"\r\n//               onChange={(e: any) =>\r\n//                 setFieldValue(\"product_type\", e.target.value)\r\n//               }\r\n//             />\r\n//             <p className=\"text-red-700 text-xs mt-1\">\r\n//               <ErrorMessage name=\"product_type\" />\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"mb-3 w-full relative\">\r\n//           <label\r\n//             className=\"text-[#2B2C2B] text-[12px] font-[400]\"\r\n//             htmlFor=\"store_description\"\r\n//           >\r\n//             Business Description\r\n//           </label>\r\n//           <Field\r\n//             as=\"textarea\"\r\n//             rows={4}\r\n//             className=\"mt-1 block w-full border-[0.5px] pl-3 rounded-[5px] focus:outline-none text-sm bg-[#FBFBFF] border-[#D8D8E2]\"\r\n//             name=\"store_description\"\r\n//             type=\"text\"\r\n//             id=\"store_description\"\r\n//             onChange={(e: any) =>\r\n//               setFieldValue(\"store_description\", e.target.value)\r\n//             }\r\n//             placeholder=\"Enter a short description of your store\"\r\n//           />\r\n//           <p className=\"text-red-700 text-xs mt-1\">\r\n//             <ErrorMessage name=\"store_description\" />\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       <button\r\n//         type=\"submit\" // Formik handles the onSubmit\r\n//         disabled={loader}\r\n//         onClick={() =>onSubmit}\r\n//         className={`disabled:bg-gray-500 flex gap-2 items-center py-2 w-fit px-6 bg-secondary text-white rounded-full hover:bg-secondary/[70%]`}\r\n//       >\r\n//         {loader ? <LoadingSpinner /> : \"Proceed\"}\r\n//         {!loader && <FaArrowRight />}\r\n//       </button>\r\n//     </Form>\r\n//   )}\r\n// </Formik>\r\n\r\n//               </div>\r\n//             </div>\r\n//                   <ToastContainer\r\n//                     position=\"top-right\"\r\n//                     autoClose={2000}\r\n//                     hideProgressBar={true}\r\n//                     newestOnTop={false}\r\n//                     closeOnClick\r\n//                     rtl={false}\r\n//                     pauseOnFocusLoss\r\n//                     draggable\r\n//                     pauseOnHover\r\n//                   />\r\n//           </div>\r\n// </div>\r\n// </DashboardLayout>\r\n//   )\r\n// }\r\n\r\n// export default CreateStore\r\n"],"names":["props","_jsxs","role","className","viewBox","fill","xmlns","children","_jsx","d","CreateStore","formValues","setFormValues","useState","store_name","domain_name","store_abbreviation","industry_type","product_type","store_description","store_location","storeLogo","setStoreLogo","loader","setLoader","navigate","useNavigate","handleInputChange","e","name","value","target","prev","_objectSpread","DashboardLayout","onSubmit","async","preventDefault","formData","FormData","append","console","log","response","UserApis","createStore","_response$data","_response$data2","status","toast","success","data","message","error","htmlFor","src","URL","createObjectURL","alt","width","height","type","accept","onChange","_e$target$files","file","files","placeholder","required","rows","disabled","LoadingSpinner","FaArrowRight","ToastContainer","autoClose"],"sourceRoot":""}